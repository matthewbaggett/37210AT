<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" href="css/styles.css" type="text/css">
<title></title>
<style type="text/css">
<!--
body {
	margin-left: 0px;
	margin-top: 0px;
	margin-right: 0px;
	margin-bottom: 0px;
	background-color:#000000;
}
-->
#top_td
 {
     background-image:url(image/logo2.jpg);
     background-position:center;
     background-repeat:no-repeat; 
     height:40px;
     }
</style>
</head>
<script>
    //right
    var USER_ADMIN = 0;
    var USER_MANAGE = 1;
    var USER_OPERATOR = 2;
    var USER_VISITOR = 3;
    var PLUGIN_QUICKTIME = 1;
    var PLUGIN_VLC = 2;
    //ptz
    var PTZ_CMD_UP = 0;
    var PTZ_CMD_DOWN = 1;
    var PTZ_CMD_LEFT = 2;
    var PTZ_CMD_RIGHT = 3;
    var PTZ_CMD_FOCUSADD = 4;
    var PTZ_CMD_FOCUSDEL = 5;
    var PTZ_CMD_ZOOMADD = 6;
    var PTZ_CMD_ZOOMDEL = 7;
    var PTZ_CMD_IRISOPEN = 8;
    var PTZ_CMD_IRISCLOSE = 9;
    var PTZ_CMD_STOP = 10;
    var PTZ_CMD_AUTOON = 11;
    var PTZ_CMD_AUTOOFF = 12;
    var PTZ_CMD_LEFTUP = 13;
    var PTZ_CMD_LEFTDOWN = 14;
    var PTZ_CMD_RIGHTUP = 15;
    var PTZ_CMD_RIGHTDOWN = 16;
    var PTZ_CMD_AUTOHOR = 17;
    var PTZ_CMD_AUTOVER = 18;
    var PTZ_CMD_STOP_AUTOHOR = 19;
    var PTZ_CMD_STOP_AUTOVER = 20;
    //osd
    var SCAM_CMD_OSD = 1;
    var SCAM_CMD_BRIGHT = 2;
    var SCAM_CMD_CONTRAST = 3;
    var SCAM_CMD_HUE = 4;
    var SCAM_CMD_SATURA = 5;
    var SCAM_CMD_PTZX = 6;
    var SCAM_CMD_MIRROR = 7;
    var SCAM_CMD_FLIP = 8;
    var SCAM_CMD_HZ = 9;
    //relay
    var SWITCH_CMD_ON = 1;
    var SWITCH_CMD_OFF = 0;
    //icon-state
    var ICON_STATE_GRAY = 0;
    var ICON_STATE_YELLOW = 1;
    var ICON_STATE_GREEN = 2;
    var ICON_STATE_RED = 3;
    //
    var REC_STATE_SUCC = 2;
    var REC_STATE_FAIL = 1;
    var REC_STATE_STOP = 0;
    var LISTEN_STATE_SUCC = 2;
    var LISTEN_STATE_FAIL = 1;
    var LISTEN_STATE_STOP = 0;
    var TALK_STATE_SUCC = 2;
    var TALK_STATE_FAIL = 1;
    var TALK_STATE_STOP = 0;
    //size
    var SHOW_AUTO_SIZE = 1;
    var SHOW_REAL_SIZE = 2;
    var show_size_mode = SHOW_REAL_SIZE;

    var current = 0;
    var cameras = {};
    cameras.alias = new Array();
    cameras.enable = new Array();
    cameras.host = new Array();
    cameras.web_port = new Array();
    cameras.data_port = new Array();
    cameras.user = new Array();
    cameras.pwd = new Array();
    cameras.pri = new Array();
    cameras.width = new Array();
    cameras.height = new Array();
    //
    cameras.valid = new Array();
    cameras.restart = new Array();
    cameras.retry_times = new Array();
    cameras.alarm = new Array();
    cameras.alarm_light = new Array();
    //
    cameras.count = 1;
    cameras.first = 0;
    cameras.pri[0] = cameras.pri[1] = cameras.pri[2] = cameras.pri[3] = USER_VISITOR;
    cameras.pri[4] = cameras.pri[5] = cameras.pri[6] = cameras.pri[7] = USER_VISITOR;
    cameras.pri[8] = USER_VISITOR;

    cameras.set_params = function (index, enable, alias, host, wport, dport, user, pwd) {
        if ((index > 8) || (index < 0))
            return;

        this.enable[index] = enable;
        this.alias[index] = alias;
        this.host[index] = host;
        this.web_port[index] = wport;
        this.data_port[index] = dport;
        this.user[index] = user;
        this.pwd[index] = pwd;
    }
    cameras.set_video_wh = function (index, w, h) {
        if ((index > 8) || (index < 0))
            return;

        this.width[index] = w;
        this.height[index] = h;
    }
    cameras.set_count = function (current, count) {
        //count
        if (count > 9) {
            count = 9;
        }
        if ((count > 4) && (count < 9)) {
            count = 4;
        }
        if (count < 1 || ((count > 1) && (count < 4))) {
            count = 1;
        }
        this.count = count;

        //first
        if (parseInt(current) + parseInt(count) > 9) {
            this.first = 9 - count;
        }
        else {
            this.first = current;
        }

        //valid
        for (i = 0; i < 9; ++i) {
            this.valid[i] = 0;
        }
        for (i = this.first; i < parseInt(this.first) + parseInt(this.count); ++i) {
            this.valid[i] = 1;
        }
    }

    function get_selwnd_enable() {
        var temp;

        temp = cameras.enable[current];

        return temp;
    }
    function get_selwnd_host() {
        var temp = "";

        temp = cameras.host[current];

        return temp;
    }
    function get_selwnd_webport() {
        var temp;

        temp = cameras.web_port[current];

        return temp;
    }
    function get_selwnd_user() {
        var temp = "";

        temp = cameras.user[current];

        return temp;
    }
    function get_selwnd_pwd() {
        var temp = "";

        temp = cameras.pwd[current];

        return temp;
    }

    function timer() {
        for (i = 0; i < 9; ++i) {
            if (cameras.alarm[i] == 1) {
                if (cameras.alarm_light[i] == 1) {
                    parent.set_icon_state(i, ICON_STATE_GREEN);
                    cameras.alarm_light[i] = 0;
                }
                else {
                    sound_player.controls.play();

                    parent.set_icon_state(i, ICON_STATE_RED);
                    cameras.alarm_light[i] = 1;
                }
            }
        }

        setTimeout('timer()', 1000);
    }

    function x_onclick(v) {
        if (v == 1) {
            if (cameras.count == 1)
                return;
            cameras.set_count(current, 1);
        }
        else if (v == 4) {
            if (cameras.count == 4)
                return;
            cameras.set_count(current, 4);
        }
        else {
            if (cameras.count == 9)
                return;
            cameras.set_count(current, 9);
        }

        for (i = 0; i < 9; ++i) {
            if (cameras.valid[i] == 1) {
                if (cameras.count == 1) {
                    ipcam[i].style.width='100%';
                    ipcam[i].style.height='100%';
//                    show_one_wnd(i);
                }
                else if (cameras.count == 4) {
                    ipcam[i].style.width ='49.99%';
                    ipcam[i].style.height = '49.99%';
                }
                else if (cameras.count == 9) {
                    ipcam[i].style.width = '33.3%';
                    ipcam[i].style.height = '33.32%';
                }
            }
            else {
                ipcam[i].style.width = 0;
                ipcam[i].style.height = 0;
            }
        }
    }
    function get_showsize_mode() {
        return show_size_mode;
    }
    function video_autosize_show() {
        show_size_mode = SHOW_AUTO_SIZE;

        show_one_wnd(current);
    }
    function video_realsize_show() {
        show_size_mode = SHOW_REAL_SIZE;

        show_one_wnd(current);
    }
    function show_one_wnd(index) {
        //page
        var page_width = '100%';
        var page_height = '100%';
        var page_scale = 0;

        //video
        var video_width = cameras.width[index];
        var video_height = cameras.height[index];
        var video_scale = 0;

        //real size
        if ((video_width >= 0) && (video_width <= page_width) && (video_height >= 0) && (video_height <= page_height))
        //if(show_size_mode==SHOW_REAL_SIZE)
        {
            ipcam[index].style.width = video_width;
            ipcam[index].style.height = video_height;
        }
        //auto size
        else if ((video_width > page_width) || (video_height > page_height))
        //else if(show_size_mode==SHOW_AUTO_SIZE)
        {
            var show_width = 0;
            var show_height = 0;

            page_scale = (page_width / page_height);
            video_scale = (video_width / video_height);

            //�ȿ���ʾ
            if (video_scale >= page_scale) {
                show_width = page_width;
                show_height = (page_width * video_height) / video_width;
            }
            //�ȸ���ʾ
            else {
                show_width = (page_height * video_width) / video_height;
                show_height = page_height;
            }

            ipcam[index].style.width = show_width;
            ipcam[index].style.height = show_height;
        }
    }

    function reset_cruise_info(index) {
        var i = 0;

        parent.reset_cruise();

        for (i = 0; i <= 9; i++) {
            var enable = ipcam[index].GetCruiseEnable(i);
            if (1 == enable) {
                var tmp_name = ipcam[index].GetCruiseName(i);

                parent.insert_cruise(tmp_name, i);
            }
        }

        var cur = ipcam[index].GetCurCruiseIndex();
        parent.set_cruise_value(cur);
    }


    function ipcam_OnFocus(index) {
        if (index == current)
            return;
        ipcam[current].SetFocus(0);
        current = index;

        parent.set_rec_state(ipcam[current].RecordStatus);
        parent.set_listen_state(ipcam[current].ListenStatus);
        parent.set_talk_state(ipcam[current].TalkStatus);

        parent.set_selptz_value(ipcam[current].PtzSpeed);
        parent.set_selbright_value(ipcam[current].Brightness);
        parent.set_selcontrast_value(ipcam[current].Contrast);
        parent.set_selhue_value(ipcam[current].Hue);
        parent.set_selsatura_value(ipcam[current].Satura);

        reset_cruise_info(current);

        parent.set_selosd_value(ipcam[current].OsdValue);
        parent.set_selmirror_value(ipcam[current].Mirror);
        parent.set_selflip_value(ipcam[current].Flip);
        parent.set_selhz_value(ipcam[current].Freque);
    }
    function ipcam_OnRecvMultiDeviceResult(index, result) {
        //alert("ipcam_OnRecvMultiDeviceResult");

        if (index != 0) {
            return;
        }
        if (result != 0) {
            return;
        }

        var i = 0;
        var is_connect = new Array;
        var enable, host, web_port, data_port, user, pwd;

        is_connect[0] = is_connect[1] = is_connect[2] = 0;
        is_connect[3] = is_connect[4] = is_connect[5] = 0;
        is_connect[6] = is_connect[7] = is_connect[8] = 0;

        for (i = 1; i <= 8; i++) {
            enable = ipcam[0].GetOtherDeviceEnable(i);
            web_port = ipcam[0].GetOtherDeviceWebPort(i);
            data_port = ipcam[0].GetOtherDeviceDataPort(i);
            host = ipcam[0].GetOtherDeviceHost(i);
            user = ipcam[0].GetOtherDeviceUser(i);
            pwd = ipcam[0].GetOtherDevicePwd(i);

            cameras.set_params(i, enable, '', host, web_port, data_port, user, pwd);

            if ((enable == 1) && (host != '')) {
                parent.set_icon_state(i, ICON_STATE_YELLOW);

                is_connect[i] = 1;
            }
            else {
                parent.set_icon_state(i, ICON_STATE_GRAY);
            }
        }

        //1
        if (is_connect[1] == 1) {
            setTimeout('connect_camera(1)', 1000);
        }
        //2
        if (is_connect[2] == 1) {
            setTimeout('connect_camera(2)', 1000);
        }
        //3
        if (is_connect[3] == 1) {
            setTimeout('connect_camera(3)', 1000);
        }
        //4
        if (is_connect[4] == 1) {
            setTimeout('connect_camera(4)', 1000);
        }
        //5
        if (is_connect[5] == 1) {
            setTimeout('connect_camera(5)', 1000);
        }
        //6
        if (is_connect[6] == 1) {
            setTimeout('connect_camera(6)', 1000);
        }
        //7
        if (is_connect[7] == 1) {
            setTimeout('connect_camera(7)', 1000);
        }
        //8
        if (is_connect[8] == 1) {
            setTimeout('connect_camera(8)', 1000);
        }

    }
    function connect_camera(index) {
        if (cameras.host[index] == '')
            return;

        var iret = ipcam[index].ConnectServer(cameras.host[index], cameras.data_port[index], cameras.user[index], cameras.pwd[index]);

        if (iret != 0) {
            //alert("connect_camera error");

            ipcam[index].DisconnectServer();

            if (cameras.retry_times[index] == 0) {
                top.show_cont_error(cameras.host[index], top.str_failtoconnect, iret);
                if (index == 0) {
                    top.location.reload("index.htm");
                }
            }
            else {
                cameras.retry_times[index]--;

                if (index == 0)
                    setTimeout('connect_camera(0)', 3000);
                else if (index == 1)
                    setTimeout('connect_camera(1)', 3000);
                else if (index == 2)
                    setTimeout('connect_camera(2)', 3000);
                else if (index == 3)
                    setTimeout('connect_camera(3)', 3000);
                else if (index == 4)
                    setTimeout('connect_camera(4)', 3000);
                else if (index == 5)
                    setTimeout('connect_camera(5)', 3000);
                else if (index == 6)
                    setTimeout('connect_camera(6)', 3000);
                else if (index == 7)
                    setTimeout('connect_camera(7)', 3000);
                else if (index == 8)
                    setTimeout('connect_camera(8)', 3000);
            }
        }
    }
    function ipcam_OnConnectServerResult(index, result, right) {
        if (result != 0) {
            if (index == 0) {
                top.login_succ = 0;
                top.h_right = USER_VISITOR;
            }

            parent.set_icon_state(index, ICON_STATE_YELLOW);
            ipcam[index].DisconnectServer();

            top.show_retcont_error(cameras.host[index], top.str_failtoconnect, result);
            if (index == 0) {
                top.location.reload("index.htm");
            }
        }
        else {
            if (index == 0) {
                top.login_succ = 1;
                top.h_right = right;
            }

            parent.set_icon_state(index, ICON_STATE_GREEN);

            cameras.pri[index] = right;
            cameras.retry_times[index] = 0;

            //
            ipcam[index].AcceptCruiseList();
        }
    }
    function ipcam_OnNetworkErrorResult(index, result) {
        var re_connect = 0;

        if (index == 0) {
            top.login_succ = 0;
            top.h_right = USER_VISITOR;
        }

        cameras.pri[index] = USER_VISITOR;
        ipcam[index].DisconnectServer();

        //icon-state--------------//
        if ((cameras.enable[index] == 1) && (cameras.host[index] != '')) {
            parent.set_icon_state(index, ICON_STATE_YELLOW);
        }
        else {
            parent.set_icon_state(index, ICON_STATE_GRAY);
        }

        //result-----------------//
        if (1 == result) {
            //alert("connect fail");
            if (cameras.retry_times[index] == 0) {
                top.show_cont_error(cameras.host[index], top.str_failtoconnect, 5);
                if (index == 0) {
                    top.location.reload("index.htm");
                }
            }
            else {
                cameras.retry_times[index]--;
                re_connect = 1;
            }

        }
        else if (2 == result) {
            //alert("exec disconnect");
            cameras.retry_times[index] = 5;
            re_connect = 1;
        }
        else if (3 == result) {
            //alert("acti disconnect");
            cameras.retry_times[index] = 5;
            re_connect = 1;
        }

        //--------------------------//
        if (re_connect == 1) {
            if (index == 0)
                setTimeout('connect_camera(0)', 5000);
            else if (index == 1)
                setTimeout('connect_camera(1)', 5000);
            else if (index == 2)
                setTimeout('connect_camera(2)', 5000);
            else if (index == 3)
                setTimeout('connect_camera(3)', 5000);
            else if (index == 4)
                setTimeout('connect_camera(4)', 5000);
            else if (index == 5)
                setTimeout('connect_camera(5)', 5000);
            else if (index == 6)
                setTimeout('connect_camera(6)', 5000);
            else if (index == 7)
                setTimeout('connect_camera(7)', 5000);
            else if (index == 8)
                setTimeout('connect_camera(8)', 5000);
        }
    }
    function ipcam_OnVideoSizeChange(index, width, height) {
        cameras.set_video_wh(index, width, height);

        if ((index == current) && (cameras.count == 1)) {
            show_one_wnd(index);
        }
    }
    function ipcam_OnHandleRecordResult(index, result) {
        if (0 == result) {
            if (index == current) {
                parent.set_rec_state(REC_STATE_SUCC);
            }
        }
        //fail
        else if (1 == result) {
            if (index == current) {
                parent.set_rec_state(REC_STATE_FAIL);
            }
            top.show_record_err(cameras.host[index], top.str_record, result);
        }
        else if (2 == result) {
            if (index == current) {
                parent.set_rec_state(REC_STATE_STOP);
            }
        }
    }
    function ipcam_OnHandleListenResult(index, result) {
        if (0 == result) {
            if (index == current) {
                parent.set_listen_state(LISTEN_STATE_SUCC);
            }
        }
        //fail
        else if (1 == result) {
            if (index == current) {
                parent.set_listen_state(LISTEN_STATE_FAIL);
            }
            top.show_listen_err(cameras.host[index], top.str_audio, result);
        }
        else if (2 == result) {
            if (index == current) {
                parent.set_listen_state(LISTEN_STATE_STOP);
            }
        }
    }
    function ipcam_OnHandleTalkResult(index, result, ip) {
        if (0 == result) {
            if (index == current) {
                parent.set_talk_state(TALK_STATE_SUCC);
            }
        }
        //fail
        else if (1 == result) {
            if (index == current) {
                parent.set_talk_state(TALK_STATE_FAIL);
            }
            top.show_talk_err(cameras.host[index], top.str_talk, result);
        }
        else if (2 == result) {
            if (index == current) {
                parent.set_talk_state(TALK_STATE_STOP);
            }
        }
    }
    function ipcam_OnHandleCaptureResult(index, result) {
    }
    function ipcam_OnVideoImgChange(index, result) {
    }
    function ipcam_OnGetCruiseListResult(index, result) {
        if (0 == result) {
            if (index == current) {
                reset_cruise_info(index);
            }
        }
        else {
            top.show_getcruise_err(cameras.host[index], top.str_cruise_title, result);
        }
    }
    function ipcam_OnCtrlCruiseResult(index, result) {
        if (0 != result) {
            top.show_ctrlcruise_err(cameras.host[index], top.str_cruise_title, result);
        }
    }
    function ipcam_OnSetPresetResult(index, result) {
    }
    function ipcam_OnCallPresetResult(index, result) {
    }
    function ipcam_OnCtrlRelayResult(index, result) {
    }
    function ipcam_OnHandleClearAlarm(index, result) {
        if (0 == result) {
            cameras.alarm[index] = 0;
            cameras.alarm_light[index] = 0;
            parent.set_icon_state(index, ICON_STATE_GREEN);
        }

        top.show_clearalarm_info(cameras.host[index], result);
    }
    function ipcam_OnHandleAlarmNotify(index, result) {
        if (0 == result) {
            cameras.alarm[index] = 0;
            cameras.alarm_light[index] = 0;
            parent.set_icon_state(index, ICON_STATE_GREEN);
        }
        else if ((1 == result) || (2 == result) || (3 == result)) {
            cameras.alarm[index] = 1;
        }
        else {
            top.show_notifyalarm_info(cameras.host[index], result);
        }
    }


    function body_onload() {
        var i = 0;
        var port;
        if (location.port == '') {
            port = 80;
        }
        else {
            port = location.port;
        }

        cameras.set_params(0, 1, '', location.hostname, port, top.video_port, top.user, top.pwd);
        cameras.set_params(1, 0, '', '', 0, 0, '', '');
        cameras.set_params(2, 0, '', '', 0, 0, '', '');
        cameras.set_params(3, 0, '', '', 0, 0, '', '');
        cameras.set_params(4, 0, '', '', 0, 0, '', '');
        cameras.set_params(5, 0, '', '', 0, 0, '', '');
        cameras.set_params(6, 0, '', '', 0, 0, '', '');
        cameras.set_params(7, 0, '', '', 0, 0, '', '');
        cameras.set_params(8, 0, '', '', 0, 0, '', '');
        cameras.set_count(0, 1);

        current = 0;
        ipcam[0].SetFocus(1);

        for (i = 0; i < 9; i++) {
            ipcam[i].SetShowMode(1);

            cameras.pri[i] = USER_VISITOR;
            cameras.retry_times[i] = 0;
            cameras.restart[i] = 0;
            cameras.alarm[i] = 0;
            cameras.alarm_light[i] = 0;
            cameras.width[i] = '100%';
            cameras.height[i] = '100%';

            if (cameras.valid[i] == 1) {
                ipcam[i].style.width = '100%';
                ipcam[i].style.height = '100%';
            }
            else {
                ipcam[i].style.width = 0;
                ipcam[i].style.height = 0;
            }

            if ((cameras.enable[i] == 1) && (cameras.host[i] != '')) {
                parent.set_icon_state(i, ICON_STATE_YELLOW);

                //connect_camera(i);
                timer_connect_camera(i);
            }
            else {
                parent.set_icon_state(i, ICON_STATE_GRAY);
            }
        }
    }
    function timer_connect_camera(index) {
        if (index == 0)
            setTimeout('connect_camera(0)', 500);
        else if (index == 1)
            setTimeout('connect_camera(1)', 500);
        else if (index == 2)
            setTimeout('connect_camera(2)', 500);
        else if (index == 3)
            setTimeout('connect_camera(3)', 500);
        else if (index == 4)
            setTimeout('connect_camera(4)', 500);
        else if (index == 5)
            setTimeout('connect_camera(5)', 500);
        else if (index == 6)
            setTimeout('connect_camera(6)', 500);
        else if (index == 7)
            setTimeout('connect_camera(7)', 500);
        else if (index == 8)
            setTimeout('connect_camera(8)', 500);
    }

    function body_onunload() {
        for (i = 0; i < 9; ++i) {
            ipcam[i].DisconnectServer();
        }
    }
    function download_activex() {
        var url = '';

        if (location.port == '') {
            url = "http://" + location.hostname;
        }
        else {
            url = "http://" + location.hostname + ":" + location.port;
        }

        url += "/codebase/HIPCamOcx.zip";

        window.open(url);
    }


    function playvideo_func() {
        ipcam[current].StartVideo();
    }
    function stopvideo_func() {
        ipcam[current].StopVideo();
    }
    function snapshot_func() {
        //ipcam[current].HandleCapture();
        window.open('snapshot1.htm').focus()
    }
    function record_func() {
        ipcam[current].HandleRecord();
    }
    function audio_func() {
        ipcam[current].HandleListen();
    }
    function talk_func() {
        ipcam[current].HandleTalk();
    }
    function clearalarm_func() {
        ipcam[current].ClearAlarm();
    }

    function ptz_control(v) {
        ipcam[current].PtzControl(v);
    }
    function relay_control(v) {
        ipcam[current].CtrlRelay(v);
    }
    function set_preset(v) {
        ipcam[current].SetPreset(v);
    }
    function use_preset(v) {
        ipcam[current].CallPreset(v);
    }
    function ctrl_cruise(v) {
        ipcam[current].CtrlCruise(v);
    }
    function update_cruise() {
        ipcam[current].AcceptCruiseList();
    }

    function PtzsChg(v) {
        ipcam[current].PtzSpeed = v;
    }
    function BrightnessChg(v) {
        ipcam[current].Brightness = v;
    }
    function ContrastChg(v) {
        ipcam[current].Contrast = v;
    }
    function HueChg(v) {
        ipcam[current].Hue = v;
    }
    function SaturationChg(v) {
        ipcam[current].Satura = v;
    }
    function OsdChg(v) {
        ipcam[current].OsdValue = v;
    }
    function MirrorChg(v) {
        ipcam[current].Mirror = v;
    }
    function FlipChg(v) {
        ipcam[current].Flip = v;
    }
    function HzChg(v) {
        ipcam[current].Freque = v;
    }
    function StartFullScreen() {
        ipcam[current].StartFullScreen();
    }
    setTimeout('timer()', 1000);
</script>

<script for="ipcam" event="OnFocus()">ipcam_OnFocus(this.name)</script>
<script for="ipcam" event="OnRecvMultiDeviceResult(result)">ipcam_OnRecvMultiDeviceResult(this.name, result)</script>
<script for="ipcam" event="OnConnectServerResult(result, right)">ipcam_OnConnectServerResult(this.name, result, right)</script>
<script for="ipcam" event="OnNetworkErrorResult(result)">ipcam_OnNetworkErrorResult(this.name, result)</script>

<script for="ipcam" event="OnVideoSizeChange(width,height)">ipcam_OnVideoSizeChange(this.name,width,height)</script>
<script for="ipcam" event="OnHandleRecordResult(result)">ipcam_OnHandleRecordResult(this.name, result)</script>
<script for="ipcam" event="OnHandleListenResult(result)">ipcam_OnHandleListenResult(this.name, result)</script>
<script for="ipcam" event="OnHandleTalkResult(result, ip)">ipcam_OnHandleTalkResult(this.name, result, ip)</script>
<script for="ipcam" event="OnHandleCaptureResult(result)">ipcam_OnHandleCaptureResult(this.name,result)</script>
<script for="ipcam" event="OnVideoImgChange(result)">ipcam_OnVideoImgChange(this.name,result)</script>

<script for="ipcam" event="OnGetCruiseListResult(result)">ipcam_OnGetCruiseListResult(this.name, result)</script>
<script for="ipcam" event="OnCtrlCruiseResult(result)">ipcam_OnCtrlCruiseResult(this.name, result)</script>
<script for="ipcam" event="OnSetPresetResult(result)">ipcam_OnSetPresetResult(this.name,result)</script>
<script for="ipcam" event="OnCallPresetResult(result)">ipcam_OnCallPresetResult(this.name,result)</script>
<script for="ipcam" event="OnCtrlRelayResult(result)">ipcam_OnCtrlRelayResult(this.name,result)</script>

<script for="ipcam" event="OnHandleClearAlarm(result)">ipcam_OnHandleClearAlarm(this.name,result)</script>
<script for="ipcam" event="OnHandleAlarmNotify(result)">ipcam_OnHandleAlarmNotify(this.name,result)</script>

<body onLoad="body_onload()" onUnload="body_onunload()">

<table width="100%" height="100%">
    <tr id="tr_alarm_audio" style="display:none">
	  <td  style=" width:100%; height:100%">
	   <object id="sound_player" CLASSID="CLSID:6BF52A52-394A-11d3-B153-00C04F79FAA6" type="application/x-oleobject" width="0" height="0">
          <param name="url" value="image/alarm.wav">
          <param name="autoStart" value="false">
          <param name="playCount" value="1">
          <param name="rate" value="1">
        </object>
	  </td>
	</tr>
	
	<tr id="ie_protected_mode_info" style="display:none">
	  <td colspan="2" class="f13w bc1"><strong><script>document.write(top.str_ie_protected_mode_info);</script></strong></td>
	</tr>
	
	<tr>
	  <td class="bc6 v2 h2" style="width:100%;height:100%">
	    
        <script type="text/javascript">
            //if (navigator.appName.indexOf("Microsoft Internet Explorer") != -1)
            //{
            document.open();
            document.write('<div>');
            document.write('<span><object id="ipcam" name="0" style="left: 0px; top:0px; width: 320px; height: 240px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="1" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="2" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="3" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="4" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="5" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="6" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="7" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></object></span>');
            document.write('<span><object id="ipcam" name="8" style="left: 0px; top:0px; width: 0px; height: 0px;" classid="clsid:8fbd5482-bb5d-42d6-8759-d4c6a67e5569" codebase="HIPCamOcx.ocx#version=1,0,0,9" align="absbottom" viewastext></span>');
            document.write('</div>');

            document.write('<p align="left" style="font-size:12px;color:white;">');

            document.write('&nbsp;&nbsp;&nbsp;&nbsp;<span id="t5">');
            document.write(top.str_ocx_notify);
            document.write('</span><br>');

            document.write(' <span id="t6">');
            document.write(top.str_ocx_notify_1);
            document.write('<br>');
            document.write(top.str_ocx_notify_2);
            document.write('<br><br>');

            document.write(top.str_ocx_please_onclick);
            document.write('</span><a href="#" onclick="javascript:download_activex()" id="t7">');
            document.write(top.str_ocx_download);
            document.write('</a>');

            document.write(' <span id="t8">');
            document.write(top.str_ocx_then_install);
            document.write('</span><span id="t10">');
            document.write(top.str_ocx_refresh_page);
            document.write('</span></p>');
            document.close();
            //}
        </script>
	  </td>
	</tr>	
</table>

</body>
</html>
